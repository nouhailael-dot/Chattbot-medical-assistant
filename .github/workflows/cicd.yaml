name: Deploy Application Docker Image to EC2 instance

on:
  push:
    branches: [main]


jobs:
  Continuous-Integration:
    runs-on: ubuntu-22.04
    environment: AWS_ACCESS_KEY_ID

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # NEW: ensure the ECR repository exists (idempotent)
      - name: Ensure ECR repository exists
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }} # must be just the repo NAME, e.g. "chattbot-medical-assistant"
        run: |
          set -euo pipefail
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --region us-east-2 >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$ECR_REPOSITORY" \
              --image-scanning-configuration scanOnPush=true \
              --region us-east-2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          set -euo pipefail
          # Trim whitespace/newlines from variables (defensive)
          ECR_REGISTRY=$(echo "$ECR_REGISTRY" | tr -d '\n' | xargs)
          ECR_REPOSITORY=$(echo "$ECR_REPOSITORY" | tr -d '\n' | xargs)
          IMAGE_TAG=$(echo "$IMAGE_TAG" | tr -d '\n' | xargs)

          IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          echo "URL: $IMAGE"
          # use the supported output mechanism
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: self-hosted
    environment: AWS_ACCESS_KEY_ID

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run Docker Image to serve users
        run: |
         docker run -d -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" -p 8080:8080 "${{ steps.login-ecr.outputs.registry }}"/"${{ secrets.ECR_REPO }}":latest