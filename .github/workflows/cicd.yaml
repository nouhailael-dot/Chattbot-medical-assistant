name: Deploy Application Docker Image to EC2 instance

on:
  push:
    branches: [main]

jobs:
  Continuous-Integration:
    runs-on: ubuntu-22.04
    environment: AWS_ACCESS_KEY_ID

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      # Normalize & validate repo name to satisfy ECR regex
      - name: Normalize ECR repository name (CI)
        id: norm-repo
        env:
          RAW_REPO: ${{ secrets.ECR_REPO }}
        run: |
          set -euo pipefail
          RAW="${RAW_REPO}"
          # lower-case + trim + replace spaces with hyphens
          NORM="$(echo "$RAW" | tr '[:upper:]' '[:lower:]' | tr -d '\n' | xargs)"
          NORM="${NORM// /-}"
          # collapse multiple slashes (optional namespaces are allowed)
          NORM="$(printf '%s' "$NORM" | sed -E 's:/{2,}:/:g')"
          # Quick sanity: must match ECR allowed pattern
          PAT='^(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*$'
          if ! printf '%s' "$NORM" | grep -Eq "$PAT"; then
            echo "ERROR: ECR_REPO='$RAW' normalizes to '$NORM' which is not a valid ECR repository name." >&2
            echo "Must match: $PAT" >&2
            echo "Examples: 'my-service', 'team/tools.api', 'frontend_v2'" >&2
            exit 1
          fi
          echo "Using ECR repository: $NORM"
          echo "repo=$NORM" >> "$GITHUB_OUTPUT"

      # Ensure the ECR repository exists (safe to run every time)
      - name: Ensure ECR repository exists
        env:
          ECR_REPOSITORY: ${{ steps.norm-repo.outputs.repo }}
        run: |
          set -euo pipefail
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --region us-east-2 >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$ECR_REPOSITORY" \
              --image-scanning-configuration scanOnPush=true \
              --region us-east-2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.norm-repo.outputs.repo }}
          IMAGE_TAG: latest
        run: |
          set -euo pipefail
          # Trim whitespace/newlines from variables (defensive)
          ECR_REGISTRY=$(echo "$ECR_REGISTRY" | tr -d '\n' | xargs)
          ECR_REPOSITORY=$(echo "$ECR_REPOSITORY" | tr -d '\n' | xargs)
          IMAGE_TAG=$(echo "$IMAGE_TAG" | tr -d '\n' | xargs)

          IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          echo "URL: $IMAGE"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: self-hosted
    environment: AWS_ACCESS_KEY_ID

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (self-hosted)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-2' }}

      # Ensure AWS CLI v2 exists on the runner
      - name: Ensure AWS CLI v2 present
        run: |
          set -euo pipefail
          if ! command -v aws >/dev/null 2>&1; then
            tmpdir="$(mktemp -d)"
            cd "$tmpdir"
            sudo apt-get update -y
            sudo apt-get install -y unzip
            curl -fsSLO "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
            unzip -q awscli-exe-linux-x86_64.zip
            sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          fi
          aws --version

      # Normalize & validate repo name again in CD
      - name: Normalize ECR repository name (CD)
        id: norm-repo
        env:
          RAW_REPO: ${{ secrets.ECR_REPO }}
        run: |
          set -euo pipefail
          RAW="${RAW_REPO}"
          NORM="$(echo "$RAW" | tr '[:upper:]' '[:lower:]' | tr -d '\n' | xargs)"
          NORM="${NORM// /-}"
          NORM="$(printf '%s' "$NORM" | sed -E 's:/{2,}:/:g')"
          PAT='^(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*$'
          if ! printf '%s' "$NORM" | grep -Eq "$PAT"; then
            echo "ERROR: ECR_REPO='$RAW' -> '$NORM' invalid for ECR." >&2
            exit 1
          fi
          echo "repo=$NORM" >> "$GITHUB_OUTPUT"

      - name: Pull image
        env:
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-2' }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY: ${{ steps.norm-repo.outputs.repo }}
          IMAGE_TAG: latest
        run: |
          set -euo pipefail
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          IMAGE="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

          aws ecr get-login-password --region "${AWS_REGION}" \
            | docker login --username AWS --password-stdin "${ECR_REGISTRY}"

          docker pull "${IMAGE}"

      - name: Deploy with Docker Compose
        env:
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-2' }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY: ${{ steps.norm-repo.outputs.repo }}
          IMAGE_TAG: latest
          # app secrets for your service:
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

          # Make envs available to compose (if your compose uses them)
          export ECR_REGISTRY ECR_REPOSITORY IMAGE_TAG PINECONE_API_KEY OPENAI_API_KEY

          docker compose pull
          docker compose down
          docker compose up -d
          docker compose ps