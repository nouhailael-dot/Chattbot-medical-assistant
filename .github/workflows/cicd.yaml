name: Deploy Application Docker Image to EC2 instance

on:
  push:
    branches: [main]

jobs:
  Continuous-Integration:
    runs-on: ubuntu-22.04
    environment: AWS_ACCESS_KEY_ID

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      # Normalize & validate repo name to satisfy ECR regex
      - name: Normalize ECR repository name (CI)
        id: norm-repo
        env:
          RAW_REPO: ${{ secrets.ECR_REPO }}
        run: |
          set -euo pipefail
          RAW="${RAW_REPO}"
          # lower-case + trim + replace spaces with hyphens
          NORM="$(echo "$RAW" | tr '[:upper:]' '[:lower:]' | tr -d '\n' | xargs)"
          NORM="${NORM// /-}"
          # collapse multiple slashes (optional namespaces are allowed)
          NORM="$(printf '%s' "$NORM" | sed -E 's:/{2,}:/:g')"
          # Quick sanity: must match ECR allowed pattern
          PAT='^(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*$'
          if ! printf '%s' "$NORM" | grep -Eq "$PAT"; then
            echo "ERROR: ECR_REPO='$RAW' normalizes to '$NORM' which is not a valid ECR repository name." >&2
            echo "Must match: $PAT" >&2
            echo "Examples: 'my-service', 'team/tools.api', 'frontend_v2'" >&2
            exit 1
          fi
          echo "Using ECR repository: $NORM"
          echo "repo=$NORM" >> "$GITHUB_OUTPUT"

      # Ensure the ECR repository exists (safe to run every time)
      - name: Ensure ECR repository exists
        env:
          ECR_REPOSITORY: ${{ steps.norm-repo.outputs.repo }}
        run: |
          set -euo pipefail
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --region us-east-2 >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$ECR_REPOSITORY" \
              --image-scanning-configuration scanOnPush=true \
              --region us-east-2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.norm-repo.outputs.repo }}
          IMAGE_TAG: latest
        run: |
          set -euo pipefail
          # Trim whitespace/newlines from variables (defensive)
          ECR_REGISTRY=$(echo "$ECR_REGISTRY" | tr -d '\n' | xargs)
          ECR_REPOSITORY=$(echo "$ECR_REPOSITORY" | tr -d '\n' | xargs)
          IMAGE_TAG=$(echo "$IMAGE_TAG" | tr -d '\n' | xargs)

          IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          echo "URL: $IMAGE"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: self-hosted
    environment: AWS_ACCESS_KEY_ID

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      # Normalize & validate repo name again in CD (uses the same secret)
      - name: Normalize ECR repository name (CD)
        id: norm-repo
        env:
          RAW_REPO: ${{ secrets.ECR_REPO }}
        run: |
          set -euo pipefail
          RAW="${RAW_REPO}"
          NORM="$(echo "$RAW" | tr '[:upper:]' '[:lower:]' | tr -d '\n' | xargs)"
          NORM="${NORM// /-}"
          NORM="$(printf '%s' "$NORM" | sed -E 's:/{2,}:/:g')"
          PAT='^(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*$'
          if ! printf '%s' "$NORM" | grep -Eq "$PAT"; then
            echo "ERROR: ECR_REPO='$RAW' normalizes to '$NORM' which is not a valid ECR repository name." >&2
            echo "Must match: $PAT" >&2
            exit 1
          fi
          echo "repo=$NORM" >> "$GITHUB_OUTPUT"

      # Pull explicitly so issues show up clearly during deploy
      - name: Pull image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.norm-repo.outputs.repo }}
          IMAGE_TAG: latest
        run: |
          set -euo pipefail
          IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker pull "$IMAGE"

      - name: Deploy with Docker Compose
        env:
          # export all the secrets into the environment so Compose can see them
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.norm-repo.outputs.repo }}
          IMAGE_TAG: latest
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          aws ecr get-login-password --region "$AWS_DEFAULT_REGION" \
            | docker login --username AWS --password-stdin "$ECR_REGISTRY"
          # Pull both app image + ollama if needed
          docker compose pull

          # Restart services cleanly
          docker compose down
          docker compose up -d

          docker compose ps
